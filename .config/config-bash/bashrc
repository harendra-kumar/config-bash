#!/bin/bash

CONFIG_DIR=~/.config/config-home

function source_file () {
  test -f $1 && source $1
}

function setup_aliases {
  alias ls='ls -G'
  alias ll='ls -l'
  alias lal='ls -al'
  alias vi='vim'
  alias mv='mv -i'
}

function setup_host_aliases {
  function cdh () {
      cd /vol/hosts/${1:-${HOSTNAME%.*}}
  }

  function cdw () {
      cd /vol/hosts/${1:-${HOSTNAME%.*}}/workspace
  }
}

function setup_prompt() {
  # set a fancy prompt (non-color, unless we know we "want" color)
  case "$TERM" in
      xterm-color) color_prompt=yes;;
      xterm-256color) color_prompt=yes;;
  esac

  # uncomment for a colored prompt, if the terminal has the capability; turned
  # off by default to not distract the user: the focus in a terminal window
  # should be on the output of commands, not on the prompt
  # For Xquartz - it supports color but show the TERM as 'xterm' only.
  force_color_prompt=yes

  if [ -n "$force_color_prompt" ]; then
      if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
      else
    color_prompt=
      fi
  fi

  if [ "$color_prompt" = yes ]; then
      #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
      PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[$txtcyn\]$git_branch\[$txtred\]$git_dirty\[$txtrst\]\$ '
  else
      #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
      PS1='${debian_chroot:+($debian_chroot)}\h:\w$git_branch$git_dirty\$ '
  fi
  unset color_prompt force_color_prompt

  # If this is an xterm set the title to user@host:dir
  case "$TERM" in
  xterm*|rxvt*)
      #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
      PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\h: \w\a\]$PS1"
      ;;
  *)
      ;;
  esac
}

function setup_history_params () {
  # don't put duplicate lines or lines starting with space in the history.
  # See bash(1) for more options
  HISTCONTROL=ignoreboth

  # append to the history file, don't overwrite it
  shopt -s histappend

  # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
  HISTSIZE=1000
  HISTFILESIZE=2000

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize
}

setup_gitawareprompt () {
  local dir=$CONFIG_DIR/git-aware-prompt
  if test -e $dir
  then
    export GITAWAREPROMPT=$dir
    source $GITAWAREPROMPT/main.sh
  fi
}

setup_haskell() {
  # Haskell stack shell tab completion
  type stack >/dev/null 2>&1 && eval "$(stack --bash-completion-script "$(which stack)")"
}

setup_aliases

# I run multiple VMs on a physical host. I do not use the homedirs for anything
# else other than repeatable config deployed automatically. The workspaces are
# kept in /vol/hosts/<hostname> which is mounted via shared folders. Setup
# convenience functions to access these locations.
setup_host_aliases

setup_haskell
# This is problematic for big repositories on VirtualBox guests because of slow
# IO through shared folders. So we disable it in common config and enable only
# for non VM machines in the non-vm hosts' bashrc only.
#setup_gitawareprompt
setup_prompt
setup_history_params
